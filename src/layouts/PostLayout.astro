---
import Navigation from "@/components/Navigation.astro";
import type { CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";

interface Props {
  frontmatter: CollectionEntry<"personal" | "technical">["data"];
}
const { frontmatter } = Astro.props;
---

<Layout title={frontmatter.title}>
  <Navigation activeNavItem="blog" />
  <div class="text-white p-4 flex flex-col gap-10 pt-20">
    <div
      class="flex flex-row top-0 mx-auto text-center justify-center sticky text-xl w-full lg:text-2xl font-kodeMono backdrop-blur-xl bg-primaryDark/90 z-10 p-2 lg:p-4 border-b-2 border-lightGreen/30"
    >
      <h1
        class="mx-auto w-full text-transparent bg-gradient-to-r bg-clip-text from-blue-500 via-purple-500 to-red-500 hover:from-red-500 hover:via-purple-500 hover:to-blue-500 transition-all duration-700"
      >
        {frontmatter.title}
        <p class="italic text-sm text-gray-400 pt-1">
          {frontmatter.date}
          <span class="hidden lg:inline-block"
            >• {Math.ceil(frontmatter.readingTime || 5)} min read •
          </span>
          <span class="text-teaGreen">
            {
              frontmatter.tags &&
                frontmatter.tags.length > 0 &&
                `#${frontmatter.tags[0]}`
            }
          </span>
        </p>
      </h1>
    </div>

    <div class="flex flex-row w-full gap-6 lg:gap-16 relative">
      <div class="hidden lg:block lg:w-1/4 sticky top-32 h-fit ml-10">
        {
          frontmatter.tableOfContents &&
            frontmatter.tableOfContents?.length > 0 && (
              <div class="bg-primaryDark/50 backdrop-blur-sm p-6 rounded-xl border border-lightGreen/20">
                <p class="font-bold font-kodeMono text-teaGreen mb-4">
                  Table Of Contents
                </p>
                <ol class="flex flex-col gap-4">
                  {frontmatter.tableOfContents?.map(
                    (tableOfContent: string, index: number) => (
                      <li
                        class="toc-item flex gap-2"
                        id={`${tableOfContent}`}
                        data-toc-item
                        data-toc-target={tableOfContent
                          .toLowerCase()
                          .replace(/\s+/g, "-")}
                      >
                        <span class="text-teaGreen/70 font-kodeMono">
                          {index + 1}.
                        </span>
                        <a
                          href={`#${tableOfContent.toLowerCase().replace(/\s+/g, "-")}`}
                          class="hover:underline"
                          data-astro-reload
                        >
                          {tableOfContent}
                        </a>
                      </li>
                    ),
                  )}
                </ol>
              </div>
            )
        }
      </div>

      <div
        class="mx-auto p-4 pt-0 lg:w-1/2 font-montserrat pb-[5rem] lg:pb-[10rem]"
      >
        <div
          class="prose prose-invert prose-lg max-w-none prose-headings:font-kodeMono prose-headings:text-teaGreen prose-a:text-lightGreen hover:prose-a:text-teaGreen prose-a:transition-all prose-a:duration-300 prose-a:no-underline prose-a:border-b prose-a:border-lightGreen/30 hover:prose-a:border-teaGreen prose-code:text-red-400 prose-code:bg-primaryDark/50 prose-code:p-1 prose-code:rounded"
        >
          <slot />
        </div>

        <div class="mt-16 pt-8 border-t border-lightGreen/20">
          <div
            class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4"
          >
            <div>
              <p class="text-teaGreen font-kodeMono text-sm">WRITTEN BY</p>
              <p class="text-lightGreen text-lg">
                {"Shreyas Thirumalai"}
              </p>
            </div>

            {
              frontmatter.tags && frontmatter.tags.length > 0 && (
                <div>
                  <p class="text-teaGreen font-kodeMono text-sm">TAGS</p>
                  <div class="flex flex-wrap gap-2 mt-2">
                    {frontmatter.tags.map((tag: string) => (
                      <span class="bg-primaryGreenDark/50 text-lightGreen px-3 py-1 rounded-full text-xs font-kodeMono">
                        #{tag}
                      </span>
                    ))}
                  </div>
                </div>
              )
            }
          </div>

          <div
            class="mt-10 p-6 bg-primaryDark/50 backdrop-blur-sm rounded-xl border border-lightGreen/20"
          >
            <p class="text-teaGreen font-kodeMono text-lg mb-4">
              Enjoyed this post?
            </p>
            <p class="text-lightGreen mb-4">
              Check out more of my writing or connect with me on social media!
            </p>
            <div class="flex gap-4">
              <a
                href="/posts"
                class="bg-teaGreen text-primaryDark font-kodeMono font-bold px-4 py-2 rounded-lg hover:bg-opacity-80 transition-all duration-300"
              >
                More Posts
              </a>
              <a
                href="/contact"
                class="bg-primaryGreenDark text-teaGreen font-kodeMono font-bold px-4 py-2 rounded-lg hover:bg-opacity-80 transition-all duration-300"
              >
                Say Hi!
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  @reference "../styles/global.css";
  :global(h2),
  :global(h3) {
    position: relative;
    display: inline-block;
  }

  :global(h2)::after,
  :global(h3)::after {
    content: "";
    position: absolute;
    width: 0;
    height: 3px;
    bottom: 0;
    left: 0;
    background: linear-gradient(90deg, #60a5fa, #db2777);
    transition: width 0.4s ease-in-out;
  }

  :global(h2:hover)::after,
  :global(h3:hover)::after {
    width: 100%;
  }

  /* Add some sass with subtle animations for code blocks */
  :global(pre) {
    position: relative;
    border-radius: 0.5rem;
    border-left: 4px solid #aef78e;
    transition: all 0.3s ease;
  }

  :global(pre:hover) {
    border-left-color: #db2777;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .toc-item {
    @apply text-lightGreen hover:text-teaGreen transition-all duration-300;
  }

  .toc-item.active {
    @apply text-yellowGreen font-bold;
  }

  .toc-item.active a {
    @apply text-yellowGreen font-bold;
  }
</style>

<script is:inline>
  function updateTOCColors() {
    const currentHash = window.location.hash.slice(1);

    // Remove active class from all items
    document.querySelectorAll("[data-toc-item]").forEach((item) => {
      item.classList.remove("active");
    });

    // Add active class to current item
    if (currentHash) {
      const activeItem = document.querySelector(
        `[data-toc-target="${currentHash}"]`,
      );
      if (activeItem) {
        activeItem.classList.add("active");
      }
    }
  }

  window.addEventListener("hashchange", updateTOCColors);
  document.addEventListener("DOMContentLoaded", updateTOCColors);
</script>
